{"version":3,"sources":["components/Message.js","actions/cartActions.js","screens/CartScreen.js"],"names":["Message","variant","children","defaultProps","addToCart","id","qty","dispatch","getState","a","axios","get","data","type","CART_ADD_ITEM","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","CartScreen","match","location","history","useSelector","state","productId","params","useDispatch","search","Number","split","console","log","useEffect","removeFromCartHandler","CART_REMOVE_ITEM","removeFromCart","Row","Col","md","length","to","ListGroup","map","item","Item","Image","src","alt","fluid","rounded","Form","Control","as","value","onChange","e","target","Array","keys","x","Button","onClick","Card","reduce","acc","toFixed","className","disabled","push"],"mappings":"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","file":"static/js/10.e72a82de.chunk.js","sourcesContent":["import {Alert} from 'react-bootstrap';\r\n\r\nconst Message = ({variant,children}) => {\r\n    return (\r\n        <Alert variant={variant}>\r\n            {children}\r\n        </Alert>\r\n    )\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant:\"info\", \r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios';\r\nimport {CART_ADD_ITEM , CART_REMOVE_ITEM} from '../constants/cartConstants';\r\n\r\nexport const addToCart  =(id,qty) =>  async(dispatch , getState) => {\r\n    const {data} = await axios.get(`http://localhost:5000/api/products/${id}`);\r\n    dispatch({\r\n        type:CART_ADD_ITEM,\r\n        payload:{\r\n            product: data._id,\r\n            name:data.name,\r\n            image:data.image,\r\n            price:data.price , \r\n            countInStock:data.countInStock,\r\n            qty\r\n        }\r\n    })\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n\r\n \r\n}\r\n\r\nexport const removeFromCart = (id) => async(dispatch , getState) => {\r\n    dispatch({\r\n        type:CART_REMOVE_ITEM,\r\n        payload:id\r\n    })\r\n    localStorage.setItem('cartItems' , JSON.stringify(getState().cart.cartItems));\r\n\r\n\r\n}","import React,{useEffect} from 'react';\r\nimport {useDispatch , useSelector} from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport {Row ,Col , ListGroup , Image,Form,Button,Card} from 'react-bootstrap';\r\nimport { addToCart, removeFromCart } from '../actions/cartActions';\r\nimport {Link} from 'react-router-dom';\r\nimport {FaTrash} from 'react-icons/fa';\r\nconst CartScreen = ({match,location,history}) => {\r\n\r\n  const cart = useSelector(state => state.cart);\r\n  const {cartItems} = cart;\r\nconst productId = match.params.id;\r\n\r\n  const dispatch  = useDispatch();\r\n  const qty = location.search ? Number(location.search.split('=')[1]):1\r\n  console.log(qty);\r\n  useEffect(() => {\r\n if(productId) {\r\n   dispatch(addToCart(productId , qty));\r\n }\r\n  }, [dispatch,  productId , qty])\r\n\r\n\r\nconst removeFromCartHandler =(id) => {\r\ndispatch(removeFromCart(id));\r\n  \r\n}\r\n\r\nconst checkoutHandler = () => {\r\n  history.push('/login?redirect=shipping');\r\n}\r\n\r\n    return(\r\n<Row>\r\n  <Col md={8}>\r\n <h1>Shopping Cart</h1>\r\n {cartItems.length === 0 ? <Message> Your cart is empty\r\n   <Link to=\"/\">   Go Back</Link>\r\n </Message> : (\r\n   <ListGroup variant=\"flush\">\r\n     {cartItems.map(item => (\r\n       <ListGroup.Item key={item.product}>\r\n   <Row>\r\n     <Col md={2}>\r\n       <Image src={item.image} alt={item.name} fluid rounded/>\r\n     </Col>\r\n     <Col md={3}>\r\n       <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n     </Col>\r\n     <Col md={2}>${item.price}</Col>\r\n     <Col md={2}>\r\n       <Form.Control as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product , Number(e.target.value)))}>\r\n       {[...Array(item.countInStock).keys()].map(x => (\r\n         <option key={x + 1} value={x + 1}>{x + 1}</option>\r\n       ))}\r\n       </Form.Control>\r\n     </Col>\r\n     <Col md={2}>\r\n  <Button type=\"button\" variant=\"light\" onClick={() => removeFromCartHandler(item.product)}>\r\n         <i><FaTrash/></i>\r\n       </Button> \r\n     </Col>\r\n   </Row>\r\n       </ListGroup.Item>\r\n     ))}\r\n   </ListGroup>\r\n )}\r\n  </Col>\r\n\r\n  <Col md={4}>\r\n  <Card>\r\n    <ListGroup variant=\"flush\">\r\n<ListGroup.Item>\r\n  <h2>Subtotal ({\r\ncartItems.reduce((acc,item) => {\r\n  return acc + item.qty\r\n}, 0) }) items</h2>\r\n${cartItems.reduce((acc, item) => {\r\n  return acc + item.price * item.qty\r\n},0).toFixed(2)}\r\n</ListGroup.Item>\r\n<ListGroup.Item>\r\n  <Button type=\"button\" className=\"btn-block\" disabled={cartItems.length === 0} onClick={checkoutHandler} >\r\n    Proceed to Checkout\r\n  </Button>\r\n</ListGroup.Item>\r\n    </ListGroup>\r\n  </Card>\r\n\r\n</Col>\r\n</Row>\r\n    )\r\n}\r\n\r\nexport default CartScreen;"],"sourceRoot":""}